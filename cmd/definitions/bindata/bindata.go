// Code generated by go-bindata. DO NOT EDIT.
// sources:
// definitions/features.toml (1.578kB)
// definitions/fields.toml (629B)
// definitions/info_object_meta.toml (932B)
// definitions/info_storage_meta.toml (1.139kB)
// definitions/operations.toml (8.514kB)
// definitions/pairs.toml (1.416kB)
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (10.994kB)

// +build tools

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _definitionsFeaturesToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8b\x13\x41\x10\x85\xef\xf3\x2b\x1e\x7b\x51\x21\x09\x7a\x11\x15\x3c\x8b\x37\x41\x6f\x8b\x84\xca\x74\xc5\x29\xd3\xd3\x35\x54\xd7\x4c\xd8\x7f\x2f\x3d\x93\xd9\x0d\x21\x13\xc4\xdd\x83\xb7\x24\xdd\xf5\xea\xbd\xf7\x35\xb9\x8f\xaa\x99\xb7\x1d\x89\xfd\xac\x02\xe7\xda\xa4\x73\xd1\x84\xcf\xb8\xbb\xbb\xab\x9e\x4e\xb1\x67\xf2\xde\x18\x92\x11\x38\xcb\xaf\xc4\x01\x7b\x35\xf4\x99\x2d\xe3\xd8\x28\x82\xa6\x57\x8e\x23\x25\x47\x76\x93\xda\x31\x0e\xd6\x0d\xd7\x87\xbc\xa9\xaa\xaf\x7b\x78\x23\xf9\x5c\x89\x13\xed\x22\x87\x15\xbc\x61\x64\xb6\x41\x6a\xc6\x51\x62\x44\x52\x87\xb1\xf7\x96\x40\x09\x6c\xa6\x36\xae\x2b\xbf\xe7\xbe\xeb\xd4\x26\xf9\x22\xfc\xe3\x5c\xf5\x48\x19\x92\xdc\x34\xf4\x35\x07\x48\xc2\x97\xef\xdf\xd6\xef\xde\x7e\xdc\x54\x25\x51\x75\x3f\x88\x79\x4f\x71\x1b\xae\x47\x3e\x3b\x5e\xcc\x4c\x8f\x5e\xbd\x21\x47\x50\xce\x25\x7a\x43\x03\x23\x91\xcb\xc0\x28\xe3\xb3\xcf\x5d\x3f\xd5\x92\xe1\x8a\xce\x74\x90\xc0\xc8\xd2\xf6\x91\x9c\x03\xb4\x63\xa3\xe2\xa0\x64\x59\xe3\x4a\x4d\x41\xf2\xd8\x13\x5e\x97\x9e\x02\xef\xa9\x8f\x8e\x1d\x37\x34\x88\xda\x9b\x2b\xf5\x8d\x67\x8c\x28\x07\x86\x5c\x38\xa4\xf4\x70\x6e\x6f\x73\x7d\xe7\x32\x9a\x39\xd6\x53\x82\xa2\x36\xbb\x29\x8d\xd7\xc6\xe4\x5c\x2a\x5c\x9d\x3e\xaf\x10\x25\xfb\x0a\x81\x23\x97\x6f\x94\x02\xb2\x42\xd3\x3f\xe3\xd3\xdd\x6f\xae\x7d\xdb\xb2\x53\x20\xa7\x5b\x28\x2f\xae\x3e\x07\xeb\x24\x85\x47\xa9\xff\x18\xf1\x82\xd5\x17\xc0\x7d\xa9\x7c\x8e\xbe\x8c\x4f\xa8\xb3\x93\xbf\x04\xe8\x28\xe9\x70\x8b\x6e\x39\x7f\x0e\xd2\x39\x5f\xb9\x5e\xb4\x96\x08\x2d\x37\x64\x7d\x42\xad\x6d\x47\x2e\xbb\xc8\x68\x35\xf0\xa7\xd3\xbb\x1f\x15\x31\x08\xcd\xdb\x5a\xf6\x46\x43\x5e\x8d\x2f\x86\x62\xd4\x23\x8c\x29\x4c\xf7\xf6\xa6\x2d\x34\x86\x75\xf6\x87\x78\x9a\x9d\xca\x5e\xa0\x56\xfe\x0d\x6f\xfb\x92\x34\x6f\xa6\x0c\xf5\x86\x6d\xbe\xf3\x77\x40\x3e\xbc\x3f\xf1\xf8\x13\x00\x00\xff\xff\x02\x8a\xc0\x31\x2a\x06\x00\x00")

func definitionsFeaturesTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFeaturesToml,
		"definitions/features.toml",
	)
}

func definitionsFeaturesToml() (*asset, error) {
	bytes, err := definitionsFeaturesTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xde, 0x64, 0x57, 0x6f, 0xe4, 0xa1, 0x28, 0x9a, 0xdf, 0xf5, 0xa, 0x78, 0xe3, 0xe7, 0xe5, 0x4c, 0x35, 0xce, 0xe9, 0xb8, 0x4b, 0x32, 0xb7, 0xb2, 0xdc, 0x74, 0xc5, 0x98, 0xd5, 0x9f, 0x28}}
	return a, nil
}

var _definitionsFieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xbd\x4e\xc3\x40\x10\x84\x7b\x3f\x45\x94\x32\x85\x2b\x44\x47\x43\x47\x81\x88\xa0\xa0\xb0\x52\xac\xed\x8d\x59\x48\xee\xac\xb9\x41\xfc\x3c\x3d\xb2\x93\xe8\xd6\xe4\xda\x6f\xd6\xdf\xee\x8d\xdc\xb4\xb6\xab\xf8\x33\xea\xea\x6e\xb5\xde\xdc\x1f\x62\xf7\xf1\x40\x85\x30\x62\x5d\x55\x4d\x6b\x7d\x8e\x13\x61\x61\x38\xe3\x94\x79\xb3\xcb\x49\x9f\x58\xfa\x40\x81\x8c\x15\x38\xd9\x2d\xf4\xfa\x9d\xb9\x05\x4e\xf4\xa8\x14\x77\xd3\x0b\x23\x64\xd0\x47\xa5\x4c\x69\x58\xcc\xdf\xde\xcc\x4c\x8e\x5a\xda\x1a\x9d\xe6\xa9\x7d\xd7\x6e\xf6\xc7\xfd\x3e\x29\x0b\x9a\x68\x57\xf3\xbe\x8b\x51\x0c\xee\xd5\x75\x5d\x6f\xc5\xce\x09\x9c\x6f\xb3\x15\xf0\x82\x17\x35\xb9\x84\x6f\xa5\x83\x47\xfb\xa7\xf1\xfb\x5d\x83\x16\xeb\x67\x95\x5e\x67\x9e\xec\x57\x0b\xaf\x49\xe8\x4a\x2b\x12\xed\xba\x5c\xf8\x3d\x89\x11\x4e\x78\x19\x99\xa2\x4f\x1c\x4a\xce\xaf\xc5\x65\xaf\x30\x9e\xc6\x29\x18\xb4\xf0\x3f\xfc\x05\x00\x00\xff\xff\x5e\x00\x81\xc5\x75\x02\x00\x00")

func definitionsFieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFieldsToml,
		"definitions/fields.toml",
	)
}

func definitionsFieldsToml() (*asset, error) {
	bytes, err := definitionsFieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xb, 0x49, 0xd5, 0x55, 0xd0, 0x53, 0xe5, 0xf1, 0x7e, 0x39, 0x5e, 0x69, 0x19, 0x7c, 0x8a, 0xfe, 0xc, 0x85, 0x91, 0xea, 0x1c, 0xef, 0xdc, 0x3f, 0x33, 0x62, 0x5b, 0x2c, 0xfe, 0xb1, 0x7}}
	return a, nil
}

var _definitionsInfo_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xd4\x40\x0c\xed\xf3\x15\xd6\x36\x57\xe5\x2a\xa0\xbb\x02\xe9\x1a\x24\x56\x87\xc4\x21\x8a\xd5\x15\x73\x3b\x4e\x62\x36\x33\x1e\x6c\x07\x58\x21\xfe\x1d\xcd\xcc\x45\x1b\xb2\x41\xba\x6e\xc6\x7e\x7e\xcf\x7e\xf6\xc1\xa5\x84\xd1\xb7\xdc\x75\x8a\xf6\xd4\xd8\x39\x21\xdc\xc1\x8e\xa2\xbd\x7b\xb3\x6b\x3c\xea\x51\x28\x19\x71\xcc\xd1\xf7\x05\xfc\x50\xb0\x40\x0a\x36\x20\xd4\x4a\xe0\xae\xfc\x2a\x1d\xf0\xf3\x37\x3c\xda\xed\xae\x69\x0e\x47\x8e\x86\xd1\xda\x11\x63\x6f\xc3\x95\xc2\x05\x10\xfc\xdb\x4b\x56\x4d\x28\xf6\xcb\x74\xce\x6c\xe5\xd1\x5c\xbf\x15\x27\x7f\x1d\xc5\x5f\x89\xc5\xe0\x0e\x4c\x26\x5c\x0f\xf7\xe1\x7e\x1e\x69\x8a\xf4\x7d\x42\x38\xe1\x19\x28\x82\x1a\x8b\xeb\xb1\x0c\x33\x3a\xb5\x36\xb0\xa7\x8e\x70\xc1\x6f\x14\xf0\xf6\x91\x02\x16\x0c\xc5\x53\x6b\x4e\xfa\xa5\x9f\x73\x07\x2b\xcd\x8f\x14\x4f\x8f\x05\x3a\x6b\xeb\x39\x64\x02\xa8\x04\xd0\xb1\x40\xf9\x2f\x1c\x0d\xec\x17\x4e\x3c\x94\xc4\x9e\x3d\xae\xe7\x6b\x0e\x61\x1a\x8d\x92\x13\x6b\xb7\xdc\x58\xf5\xb2\x9f\xc1\x17\x23\xf2\x0f\xc8\xe7\xe5\x96\xe7\xa2\x89\xe4\x96\xcb\x7c\x95\xc1\x9f\x9c\x0d\x99\x19\xc9\x06\x94\x7a\x2e\xcf\xca\xe3\x64\x59\xc9\x06\xe0\x1a\x14\x1c\x9d\xd1\x8f\x97\xa0\xf1\x4f\x27\x5e\xe7\x35\xdc\x28\x7c\x65\x39\xdd\x93\x80\xc7\x7c\x6b\x0a\x1c\x61\x52\x94\x1b\x05\x8a\x69\xaa\xed\xe9\x59\x0d\x43\x1b\xd0\x9c\x77\xe6\xfe\x39\x3b\x94\xce\x1d\xf1\xf7\x9f\x2b\x07\x3e\x97\xa2\xfd\x4b\x4d\x51\x44\x85\x4a\x05\x1e\x3b\x8a\xe8\x61\xa6\x2c\x32\x59\x77\x43\x24\xb8\x74\xa8\x96\x3c\xfd\xc7\xec\x2f\x8a\xb2\x16\xca\x64\x5b\x32\x7f\x03\x00\x00\xff\xff\x6b\x55\xfd\x86\xa4\x03\x00\x00")

func definitionsInfo_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_object_metaToml,
		"definitions/info_object_meta.toml",
	)
}

func definitionsInfo_object_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xc7, 0x12, 0x2e, 0xc1, 0x1f, 0x6, 0x2a, 0xc2, 0xf5, 0x95, 0x4b, 0x90, 0x32, 0x59, 0x47, 0x96, 0xc7, 0x79, 0xa4, 0x2e, 0x79, 0x2f, 0x9b, 0xb9, 0xb8, 0xbf, 0x8, 0xb1, 0xc3, 0x8c, 0x18}}
	return a, nil
}

var _definitionsInfo_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xbd\x72\xab\x30\x10\x05\xe0\x5e\x4f\xa1\xa1\xe7\x56\x77\xd2\xf9\x11\x5c\xa5\xf4\xa4\x58\xa3\xc5\xd9\x09\xfa\x99\xd5\x12\x43\x32\x79\xf7\x8c\x84\x21\x63\x4c\x1c\xdb\x94\x08\x9d\xef\x2c\x48\x3b\x08\x01\x9d\x29\x5d\x6b\xf7\xc8\xa5\x85\x8e\x6c\x6b\x5f\x94\xf4\x01\xf5\x46\x17\xe4\xa4\x50\x06\x63\xc5\x14\x84\xbc\x4b\x6b\x5b\xe8\xf4\x10\xd3\x43\x2c\x6a\x72\xe3\x8a\x0f\xc8\x90\x76\xfe\x2b\x94\x1a\xf5\x48\x1f\xb8\x68\x3f\xfd\xbf\xa6\xa7\x58\xa2\x03\xf2\x55\x5e\xbc\x40\xf3\x68\x49\x0e\x4f\x55\x8b\x35\x95\x0f\xfd\xbd\x7c\xda\x36\xa8\xb5\x67\x9d\x84\x19\x5a\xa3\x54\xaf\xeb\xd4\x4c\xcc\xd8\xc6\x57\xf9\xe1\x07\x8b\xc2\xe4\x0e\xe9\x9d\xf5\xef\xb8\xae\x31\x09\xb3\x42\xdb\x36\x42\x01\x58\xee\xbd\x43\x59\x4e\xc1\xd3\x2d\x4a\xbf\x7f\xc2\x7e\x2d\x79\x64\xfc\x0c\xe6\x6f\x30\x58\x93\x43\xa3\xf7\xbd\x8e\xe2\x19\x0e\xc8\x8b\x3e\xb9\x9b\xfc\x61\xdb\x0d\xbe\x03\x8b\x97\x27\x82\x5d\xf0\x2c\x7a\xa3\x85\x5b\x54\x6a\x17\xfb\x28\x68\x4b\x8b\x02\x06\x04\xce\xea\x91\x6b\xa8\xf0\xf3\xeb\x62\x88\xe7\x1c\xda\x9e\x32\xb9\x16\xa3\x1e\xa8\x69\x9e\x91\xcc\xc3\x1c\x3d\xbf\x95\x86\xf8\xef\x81\x8e\x4c\xb2\xf2\xc6\x64\xe2\xec\x34\xbf\x03\x00\x00\xff\xff\x41\xde\xf8\x57\x73\x04\x00\x00")

func definitionsInfo_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_storage_metaToml,
		"definitions/info_storage_meta.toml",
	)
}

func definitionsInfo_storage_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xdc, 0x18, 0x27, 0xc0, 0x7d, 0xb9, 0x57, 0x8b, 0xe9, 0x90, 0xfd, 0xf8, 0xb3, 0x2, 0x40, 0x16, 0xce, 0x94, 0xf9, 0x18, 0x51, 0x52, 0x7a, 0xff, 0x6b, 0x10, 0x2d, 0x50, 0x8, 0x2e, 0xb0}}
	return a, nil
}

var _definitionsOperationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x92\xdb\x36\x12\xbe\xeb\x29\xba\x94\x83\x2f\x33\xaa\xbc\x80\x0f\xce\x8c\xb7\xd6\x55\xfe\x49\xad\x93\xcd\xc1\x35\x65\x41\x64\x53\xc4\x1a\x04\x18\x00\x94\xa2\x7d\xfa\xad\x46\x83\x24\xf8\x27\xd1\x93\xd9\xbd\x6c\x2e\x2e\x0d\x89\xfe\x41\xf7\xd7\xdd\x1f\x40\x7f\x11\x75\x8d\x3a\x47\xfb\xb4\xc9\xd1\x65\x56\xd6\x5e\x1a\x0d\xaf\x61\x2b\x1d\xf8\x12\x41\x6a\x8f\xb6\x10\x19\x42\x61\x2c\xbc\x09\xab\xc1\xa2\x12\x1e\x73\x30\x35\x5a\x41\x02\x6e\xb7\xdd\x6c\x3a\x5d\x3b\x53\xef\x32\x8b\xc2\xe3\x57\x7e\xf4\xb4\xa9\x85\x15\x95\x83\xd7\xf0\x65\x5b\x0b\x5f\x6e\x9f\x36\x16\x5d\xa3\x3c\x3f\x32\xdb\x89\xf9\xed\x76\x73\x96\x4a\x01\xeb\x01\xa1\x81\x55\x81\x39\xfc\x0b\x33\xbf\xdb\x6c\x7e\xf8\x01\x7e\xc2\x52\x9c\xa4\xb1\x9b\xcd\x3d\x3c\x84\x85\xd1\xc1\xcf\x7f\xff\xf4\xeb\xfb\xc7\x89\xb0\x38\x28\x8c\x0a\xe0\x2c\x7d\x09\xb5\x71\x32\x58\xfc\x11\x84\xce\xc1\xc9\x7f\x23\xfc\xb8\x5b\xd0\xf6\xf1\xd3\x2f\x60\xd1\x37\x56\x93\x46\xb4\xd6\x58\x10\x1c\xa5\xa8\x13\xff\x90\xce\xef\x36\x00\xf7\xf0\x19\xed\x49\x66\xd8\x79\x52\x62\xf6\x2d\xd8\xc8\x51\xa1\xc7\x54\x4a\x16\x2c\xe8\x76\x1b\xda\xf6\x30\x8e\x67\x2b\x93\x30\x8e\x82\x14\x22\x14\xe3\x92\x19\xed\x51\x7b\xf0\x66\x1a\xac\x6d\x1a\x7f\xb3\xbd\x83\xad\xa5\x7f\x68\xbb\xa3\x4c\xe8\xed\xd3\x86\x85\xbe\x56\x26\x47\x32\xc2\xaa\x26\xf9\x35\x55\x25\xfd\x55\xc7\x78\x49\xd8\x74\x21\xb5\x74\x65\xe2\x58\x6d\x4d\x86\xce\x8d\x3d\xbb\x62\xfc\xa0\x4c\xf6\x6d\x2d\x4e\x7f\xa2\xc5\x4b\x30\x8d\x9a\x12\x94\x86\x27\x2f\x00\x52\xd0\x78\x86\xa0\x6c\x1e\xa6\x2d\xae\xd8\xbd\x3f\x03\x2b\x5f\x0a\x0f\xa5\x70\xa0\x85\x97\x27\x04\xd7\xd4\xb5\xb1\x3e\x6c\x7e\x6f\x4e\x68\x03\x6e\xf6\x90\x1b\x74\xfa\x95\x87\x8f\x6f\xdf\x3e\x12\x34\x18\x87\x63\xdd\x0e\x8c\x05\x6d\xe6\x6c\xb4\x0a\x4a\x71\xc2\x5b\xc6\x9e\x83\xf5\x24\x19\x0c\xf5\x98\x8b\x39\x40\x85\x05\x03\xa0\x73\xb0\xaf\xe2\xfb\x0e\xb6\x07\x99\xdf\x86\x79\xd0\x34\x86\x87\xa9\x0e\x52\x5f\xf5\x29\x2e\x61\x47\x1c\xc1\x30\xd4\xdf\x62\xe1\x1d\x64\xee\xd6\x19\x57\xd2\xf9\x6b\x96\xe9\x7d\x6b\xf6\x80\xca\xe8\x23\x85\xc4\x97\xd2\x2d\x58\x1f\x86\xe0\x20\xaf\xb8\x91\x99\x5a\xae\xad\xb5\x07\x53\x5f\x76\xbd\x10\xc7\xad\xbe\x0c\xca\xc9\xd9\x8c\x36\x9f\x3b\x7f\xa5\x88\x4c\x7d\xa1\xd0\x7d\x62\xa4\x18\x0b\x55\xa3\xbc\xac\xfb\x96\x2d\x75\x30\xef\x18\x9f\x33\x23\x80\x34\x18\xad\x2e\xac\xcb\x68\x0c\x28\x0c\x4f\xe8\x8f\xb6\x26\x53\x90\x3f\x7e\xfa\xf8\xea\x97\xae\x3c\x5a\x64\xb3\x2f\xa0\x8d\xbe\xc7\xaa\xf6\x17\xc8\xa5\xc5\xcc\x1b\x7b\x21\xbf\xc2\xdb\x42\x2a\x74\x60\x31\x6b\xac\x93\x27\x54\x17\xd6\xfb\xab\x43\xdb\xa9\x93\x55\xad\xb0\x22\xb0\x5e\x51\x28\x42\xf3\xae\x2f\xa9\x2e\x38\x5c\x68\xab\x95\x43\x55\xb0\xde\x07\x56\x40\x56\x19\xf9\xbd\x82\x58\x76\xb1\x87\xec\xdf\x5a\xcb\x21\xfc\x60\x72\x7c\xa7\x4f\x42\xc9\x7c\xbf\x6b\xc3\x73\xbd\xe9\xe4\xce\x0f\x1b\xc3\x4b\x77\x9d\x89\x81\xff\x7e\xe7\x49\x4c\x26\xdd\xe7\x1e\xde\x80\x6b\x32\x1a\x42\x45\x13\xc1\x67\x6a\x1e\x13\xe0\x4a\xd3\xa8\x1c\x0e\xd4\x6c\x28\x85\x1e\xef\xe0\x5c\xca\xac\x84\x0a\x85\x76\x23\xb5\xaf\x5c\xd7\x93\xc8\x74\x85\x5e\xe4\xc2\x8b\x44\x4b\x40\xad\xa8\x90\x42\xec\x6c\xd6\x01\x91\x5b\x20\x65\x72\x65\xad\x3d\xb6\x49\xdf\x75\x82\xc9\x18\xcb\xe5\x54\xcd\x74\x3e\xe5\xd2\xce\x36\x88\x85\x91\xb7\xf9\x52\xa0\xcf\xca\xb5\x1e\xfe\x8d\x16\x07\xef\xa2\x18\xf9\x17\x7e\x4e\xe7\xeb\x1d\x6c\x1b\xab\x96\x3b\x42\x10\x83\xc2\x9a\x0a\x04\x1c\xe5\x09\x35\x34\x56\x11\xa0\x48\x7c\x5a\xff\xc1\xf6\x77\x8e\xd5\x29\x14\xd8\x6a\xc7\x19\x56\x81\xe1\x39\x40\xb0\xf8\x7b\x23\xad\xd4\x47\xde\x21\xbd\x6a\xac\x6a\x41\x51\x11\xba\xd7\x85\xfc\x83\x39\xe1\xae\x93\xa1\x78\xd3\x8f\xef\xee\xbf\x24\xd4\x8f\xae\x9b\xcd\x96\xac\x72\x6b\xad\xf8\xd7\xb3\x9b\x2d\x1b\x9e\xeb\x8d\x57\x5b\xea\xb2\xd8\xb4\x7b\x7e\xe0\xb5\x7f\xa6\x7b\x06\x15\x7f\x75\xcf\xd9\x92\x61\x04\x74\x15\x13\xf5\xfd\x8f\xda\x27\xb3\x04\x61\xfd\xea\x7a\x69\x05\x96\x0e\x08\x89\xc6\xa4\xbb\x76\x4f\x5f\xea\xa0\xd0\x29\x5c\x3a\xcc\xf6\x8e\x7e\x77\x4f\x9b\x84\xa6\x27\xd8\xc9\x3e\x56\x92\xec\xde\xd1\x1b\x44\x5b\xea\x1c\xff\x98\x50\xed\x3b\xd8\x92\xf0\x94\x6e\x86\xa7\x33\xf1\x8e\xa0\xb9\xe5\x69\xbb\x2e\xf5\x10\x9a\x5a\x19\x91\x47\x52\xa5\x9d\xb7\x4d\xe6\x7b\x56\x39\xb3\x01\x92\x9a\x61\xe4\x0b\xbe\x05\x52\x7e\xc3\xaf\x40\xcc\x83\xda\x31\x2f\x5f\x0c\xe4\x30\x64\xf5\x0c\x35\x6f\xfd\xa9\xc5\x71\x2d\xce\x7f\x16\x47\x9c\x81\x78\x2c\xc5\xb6\x19\x58\xa1\x73\x53\x71\xda\x77\x9d\x85\x04\xf7\xf4\xf7\x4b\x41\x9e\x74\xdd\xb8\xc1\x09\x5e\x3f\x13\xef\x9d\xeb\x8c\x74\xf6\x7c\x15\xc8\x5d\x8d\x99\x2c\x64\x06\xa6\x28\x1c\xde\x04\x3a\xaf\xba\x7d\xa8\x24\x0f\xc8\x31\x8b\x62\x3d\x85\xfa\x07\x2d\xde\x25\x62\xb4\xa3\xf0\x73\x7e\x33\xb5\x35\x27\x99\x53\x88\xcf\xe2\xd2\x76\xda\x4c\x68\x08\x32\x49\xb4\x6e\xf2\x3d\x66\x63\x9b\x2f\x71\xe8\x4f\xfd\x25\xad\x95\x90\xda\x0b\xa9\x93\xa2\x73\xde\x58\x4a\x5b\x94\xe3\x2e\xda\x2a\xe9\xa1\xb4\x82\x9c\x46\x4d\x16\xa4\x76\x5e\xe8\x0c\x87\x3e\x6b\x51\x8d\x6f\xac\x48\x02\x07\x5e\x93\x41\x9e\x60\xf3\x06\xe3\x74\x13\x2b\x8d\x0d\x15\x1f\x71\xa1\xea\x8f\xe8\x41\x40\xe0\x0b\x53\xc5\x21\xaf\x2d\x95\x7a\xde\x8e\xa8\xab\x5c\xe9\x37\x42\xa9\xa9\x59\x07\x8d\xce\xd1\x72\xf3\xe9\xcd\x0f\x8d\x49\x36\x15\x65\xd7\x41\x74\x94\x70\xce\x77\xd4\x90\x86\x7f\x0a\xb7\x5a\x48\x1b\xab\xaa\x2f\x95\xe5\xee\xd1\xe6\xaa\xa3\xa5\x81\x2b\x2f\x92\xd2\x47\x5e\x1e\x48\x68\xde\xfe\x7e\x36\x31\xb5\xc8\x1c\x53\xa9\xab\x44\x94\x97\x7d\xa5\x0c\x0c\x88\x67\xe7\x8e\x74\x20\x73\xac\x6a\x43\xdd\x26\x1a\xee\xc9\x53\xbb\x45\x75\x16\x17\xd7\xb6\x3b\x2d\x15\xf7\x3b\x5e\x1e\x15\xc5\xb6\xa8\xf1\x84\xb6\x63\xac\x3c\xd9\x3e\x1a\xff\x96\x7a\xe1\x3e\x5d\x3f\xdc\xd6\xfc\xdd\x5f\x47\x21\xb9\x85\xa6\x59\x6c\xa9\xd8\x3c\xec\xa2\xfd\xac\xb1\x96\xa2\xd0\x81\xaf\x95\x1a\x01\x8d\x1e\x6f\x9f\x36\xca\x64\x42\xc1\x6b\xf0\xb6\xc1\x91\x39\x46\xf8\x35\xc8\xf0\xf4\x65\xc0\x0c\xc6\x8f\x5c\x46\x50\x74\x93\x8b\xa4\xef\xf3\xf3\x27\xc8\xd1\xad\x7d\x0b\x84\x1c\x0b\xd1\x28\x0f\xfb\xf7\xd2\x85\x83\x41\x38\x11\x8c\x16\xf7\x80\xe8\x96\x3d\x4a\xbb\x0f\x1f\x1a\x4c\xe3\x43\xe0\x39\x05\x81\x7f\xff\x53\x5a\xdf\x08\x45\x4b\x52\x65\xc3\x94\xed\x3f\x7b\xe1\xf7\xd4\xd2\x15\x95\x20\x6b\xde\xcf\xe5\xca\xa2\x58\xb8\x86\xa7\x37\xc1\x38\x9d\x7e\x5e\x39\x88\xb9\x99\x39\x8c\x9f\x07\xc1\x1e\xcd\x3a\xa2\x77\xe6\x6b\x26\x94\x3a\x88\xec\xdb\xcc\xe8\x1b\xfa\xd3\x76\xfc\xdb\xbc\x61\xa9\x23\x0c\x90\xb2\x86\x5c\x24\x1f\x76\x28\xde\x42\x5f\x40\xd4\x12\xb2\x50\xbf\xf3\x64\x23\x25\x1a\x0e\x75\x1e\x84\xde\xfc\xfc\x2e\x0a\x8d\x97\x89\x2c\xc3\xda\x43\x7f\x40\x04\x72\x9e\x28\x49\xb4\x4d\xae\xcf\x65\xc7\x79\x71\x03\xda\xc3\xbd\xaf\xe4\x56\xa4\x16\x44\xc0\x32\xa1\x85\x46\x90\xd4\x85\x01\x53\x24\x77\xd0\x53\x90\x93\xd4\xcd\x1d\x95\x52\x8f\x0f\xb0\x0f\x41\x24\x9c\x28\x73\x59\x14\x18\xea\xbe\x83\x7d\x64\x97\x04\xee\xfe\xed\x20\x2e\x8b\xdf\xc5\x64\x11\xcb\x54\xea\x63\xea\x0b\x51\x66\xe1\xb3\x72\x26\xa2\x81\xc1\xcd\x5e\x29\xa5\x9f\xb6\xfa\xf8\x5e\xc7\xee\x42\x7c\x99\x26\x86\xd3\x28\x5f\xec\x87\x1a\x9a\x46\xf4\xb7\xb0\xee\xff\xfc\x7b\xce\xe8\x4e\x80\x63\xf7\x7d\x97\x02\xcf\xba\x10\xe0\x8e\x8e\x39\xf5\x47\x36\x6a\xf1\xf7\x06\x5d\x37\xd2\x94\xd4\xab\x3f\x1c\xd2\xda\x5e\x26\x39\x05\xd1\x83\x59\xb8\x79\x61\x8f\x93\xa3\xc0\x7c\xcd\xfe\x36\x68\x59\xa4\x31\xa9\xd1\x01\xa0\xf6\xa4\x7d\x1f\xb6\xbf\x67\x03\xfb\x58\x7d\x87\x78\xa4\xa3\xbc\x11\xb0\x0e\xce\xa8\xc6\x63\x9c\x67\xf7\xf0\xae\xe8\x25\x38\x33\x77\xb1\x89\xbd\x27\x7b\xe7\x25\x17\xc0\xf0\x7d\x1f\xcb\xb6\x9a\xd8\x0d\xc2\x0c\xc1\x89\x15\xde\x85\x75\x63\x9d\x85\x90\xea\x2e\x38\xac\xcd\x40\x6f\x78\x4b\x59\x0f\x02\xa1\xc3\x9e\x4b\xb4\xc8\x80\x49\x57\x26\x1b\xa4\xea\xe1\x8c\xc6\x09\x48\xc8\x8c\xb3\xef\x3e\xb5\xfd\x30\x1a\xbd\x27\x9e\xaa\x21\x5d\x50\xa0\xf0\x8d\x45\x38\x97\xa8\x5b\xce\xd8\x8d\x87\x21\xf6\x7b\x82\xe7\x5a\xa4\xa2\x0e\xff\x5d\x20\x70\xe7\x56\x53\xcf\xef\x4e\x18\x4f\x9d\xff\x09\x00\x00\xff\xff\x28\x6c\xc2\x39\x42\x21\x00\x00")

func definitionsOperationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsToml,
		"definitions/operations.toml",
	)
}

func definitionsOperationsToml() (*asset, error) {
	bytes, err := definitionsOperationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0xb3, 0x62, 0x71, 0x1d, 0x65, 0x9d, 0x49, 0x40, 0x6f, 0xfe, 0xb, 0x34, 0x3, 0xb6, 0x12, 0x25, 0x5b, 0xc1, 0xff, 0xfc, 0x31, 0x57, 0x44, 0xa, 0x5b, 0xea, 0x6b, 0x60, 0xdd, 0xca, 0xc7}}
	return a, nil
}

var _definitionsPairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8f\xd3\x40\x0c\xbd\xe7\x57\x58\x3d\x81\x54\x75\x2f\xc0\x8d\x2b\x12\x12\x2b\x0e\xc0\xa9\x5a\x45\x93\x19\xcf\xc6\x74\x32\x0e\x1e\xa7\x21\xfc\x7a\x34\x93\x7e\x84\xb2\xed\x2e\xdc\xaa\xb1\xdf\x7b\x7e\xcf\x6e\xb6\x96\xa3\x62\xd4\xba\x73\x6f\x1f\x2a\x9d\x7a\x84\xf7\xb0\x4a\x2a\x14\x1f\x57\x55\x75\x2a\xe7\xca\xb5\x3a\xc5\xc1\x28\x71\xac\x95\x77\x18\xff\xee\x72\x98\xac\x50\x9f\x5b\xca\x73\x8f\x96\xfc\x04\xda\x22\x2c\xe1\x50\xe0\xe0\x59\x20\x50\xd2\xc2\x2e\xe8\x30\x2a\x99\xf0\x62\xd6\x96\x47\x50\x86\x5e\x78\x4f\x0e\xe1\xcc\x50\x88\x13\xca\x9e\x2c\x42\xfe\xa9\x2c\xe6\x11\xb3\x0c\x46\xd7\x33\x45\xfd\x5f\x91\x23\xfe\x96\xc4\xcf\x9e\x64\x91\x20\x45\xbd\xca\x3e\xb6\x18\x4b\x3a\x83\x04\x10\xd4\x41\x22\x3a\x68\x26\x10\x34\xb6\x85\x91\x42\x80\x99\x2f\x33\x53\x54\x14\x8b\xbd\xb2\x9c\xe9\x3f\x9e\x1f\x73\x4f\xce\xb3\xee\xd8\x2d\x06\xf8\x44\x49\xef\xd9\x15\x8a\xc0\xb6\x6c\xe0\x9f\x56\x77\x04\xdd\x30\x1d\x4d\xf7\xc4\xd1\xdc\xe0\x3c\x60\x21\x03\x33\x01\x37\xdf\xd1\x5e\x4e\xfe\xb9\x3c\xce\xb3\x5f\x70\x9d\x4b\xd0\x96\x84\xab\x2d\x7b\x9f\x50\xff\x08\xfe\xdd\x9b\xab\x43\xcc\xdd\xc5\x92\xb6\x94\x40\xf0\xc7\x80\x49\xd7\xa7\xc9\x4a\xf8\x09\x71\x97\xf7\x5f\x5a\x0e\x90\x06\x3d\x0b\xe6\x15\xb9\x2c\xdb\x0d\x41\xa9\x37\xa2\x35\xb9\xa7\xfe\x37\xc4\xb5\x35\x21\x34\xc6\xee\xce\x65\x3f\x44\xfb\x6a\xfb\xd0\x4c\x8a\xaf\x6f\x5c\x87\x51\x50\x76\x0c\xb8\x47\x99\x40\xa9\x43\x18\x67\x65\x70\x46\x0d\x78\xe1\x0e\x12\x0f\x62\x4b\x88\x89\x7e\xe1\x4b\xfd\xe7\xde\xe7\xdc\x73\x0c\xd3\xac\x16\xa8\x23\x45\x07\x87\x8f\x44\x51\xcf\x8a\x23\xcb\xae\x76\x24\xcf\xee\x7e\xb5\xaa\x96\xeb\xcf\x38\x70\x24\x57\x4e\x6a\x7d\x70\xcc\x3d\xca\x7c\x7a\x65\x9e\x26\x7b\x0f\x46\x69\x8f\xa7\xa5\x38\x92\x4d\x75\x1c\x03\xee\xbf\x7d\xf9\x0a\x49\x8d\x28\x8c\xa4\x2d\xdc\x15\x81\x99\xec\x68\xed\x20\x97\x16\xb0\x23\xbb\x43\x6f\x86\x90\x43\x87\x3b\x20\x0f\x91\x15\x12\xea\xa6\xfa\xc0\x02\x3e\x5d\x52\x40\x19\x2c\x3a\x1e\x13\xf4\xc1\xa8\x67\xe9\xd6\xc5\x5f\x83\xad\xd9\x13\x0b\x50\x82\x21\x3a\xf4\x14\xd1\x6d\xaa\x1c\xc3\xef\x00\x00\x00\xff\xff\x50\xac\x20\x8d\x88\x05\x00\x00")

func definitionsPairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsToml,
		"definitions/pairs.toml",
	)
}

func definitionsPairsToml() (*asset, error) {
	bytes, err := definitionsPairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xe5, 0x10, 0x91, 0x51, 0x92, 0x4a, 0x75, 0x26, 0x28, 0x91, 0x4d, 0xf3, 0x98, 0x4a, 0x9c, 0x48, 0x3a, 0x89, 0x5c, 0x30, 0x2, 0xdb, 0xa7, 0x75, 0x6e, 0x89, 0xb, 0x31, 0xd, 0xec, 0x60}}
	return a, nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x2b\x0c\x0a\x3b\x70\xa4\xdd\xa2\x2f\x9d\xc2\x0f\xed\x24\x4d\x07\x9b\xcb\x20\x93\xed\x3e\x64\x17\x03\x5a\x3a\xb2\x59\x4b\xa4\x42\xd2\x9e\x31\x5c\xfd\xf7\x82\x17\x5d\x4d\xc9\x76\xd2\xdd\x60\x81\xcc\x4b\x64\xf2\xf0\xf0\xf0\x5c\x3e\x7e\x24\x13\x45\x70\xc3\x13\x84\x15\x32\x14\x44\x61\x02\xcb\x3d\xac\x78\xfd\x1b\x76\x94\x40\x9c\x27\x51\x82\x29\x65\x54\x51\xce\xe4\xdf\xe0\xc5\x3b\x78\xfb\xee\x03\xbc\x7c\x71\xfb\x21\x9c\x14\x24\xde\x90\x15\xc2\xe1\x00\xe1\x5b\x92\x23\x94\xe5\x64\x42\xf3\x82\x0b\x05\xd3\x09\x00\x40\x10\x73\xa6\xf0\x49\x05\xf6\x17\xe5\xc1\xc4\x7e\xad\xa8\x5a\x6f\x97\x61\xcc\xf3\x68\x89\x7b\xce\x12\xa9\xb8\x20\x2b\x8c\x56\xfc\x79\xf5\xb9\xfb\x4b\x54\x6c\x56\xd1\x5a\xa9\x22\xce\x28\xb2\x4a\xcb\x99\x63\x25\x8a\x1d\x8d\x51\xda\x51\xe1\xd9\xe3\xd4\xbe\xd0\x83\x66\x93\xc9\x8e\x08\x78\x80\x7b\xdb\x25\xdc\xcf\x4a\x6d\x78\x6f\x3f\x5e\x0a\xc1\xab\xbe\xc6\xd4\xf0\x5d\x61\x3c\x36\x99\x44\x11\x7c\xd8\x17\x08\x54\x82\x5a\x23\x68\xed\x90\x72\xd1\x71\x5a\xcc\x99\x54\x56\x6c\x01\x41\xab\x27\x30\xe3\xdf\x2d\xff\x83\xb1\xba\xdf\x4b\x85\xf9\x1b\x54\x24\x21\x8a\x80\xb6\x18\x25\x48\xd3\x0a\x79\xd5\xac\x55\x73\x23\x1f\x4e\xcc\x5c\x03\x83\xc5\x36\x56\x70\x98\x1c\x0e\xcf\x41\x10\xb6\x42\xb8\x7a\x98\xc3\xd5\x0e\xae\x17\x10\xde\xb2\x94\x4b\x6d\x97\x76\x9c\x96\xa0\x29\xe0\x27\xb8\xda\x85\xf7\x31\x2f\x10\x02\x3b\x41\xd0\x13\x61\x5c\x69\x99\x57\x19\x5f\x92\xac\xdd\x77\x55\x30\xbd\x9c\xeb\x85\xee\x36\x2b\xfb\x2f\x28\x7e\x47\x64\xdc\x95\xa3\xa9\x16\x78\x41\x65\x91\x91\x7d\xe5\x1b\x70\x7f\x2d\x45\x8b\x01\x31\x2d\x82\x2c\x69\x7e\x1a\x39\x94\xb1\xa0\x26\x1a\xed\x0e\xab\xa9\x2c\x9d\x94\xf1\xfd\x90\x9a\xfa\x67\xeb\xb3\x34\x91\x79\x85\xca\xeb\xdf\x47\x9a\x65\xb0\x42\xe5\xf7\x7e\x2a\x78\xee\x7a\xc2\x49\x14\x69\x45\xcf\xe1\xc3\x9a\x4a\x48\xb7\x2c\x36\x96\xca\x35\xdf\x66\x89\x71\xe9\x12\x21\x26\x59\x66\x0b\xd4\x65\x1f\xd0\xbc\xc8\x30\x47\xa6\x50\x84\xd5\x78\x04\x81\x6a\x2b\x18\x65\xab\x6a\x5e\x2b\x5d\x4f\x4c\x25\x08\x24\x09\x70\x96\xed\x81\xb0\xa4\x37\x4d\xce\x13\x9a\x52\x4c\xc2\x89\xb6\x63\x68\x71\x53\x0e\xcf\x6c\xfb\xcc\xbf\xbc\x83\x71\x9b\xcc\xe7\xc0\x37\x3a\xe8\x3c\x7c\x85\x7d\x1d\x33\x23\x43\x53\x2d\x72\xa8\x63\x6c\xed\x07\x99\x87\x53\x9f\x66\x3b\xc8\x46\xc5\x89\xfa\xc4\x0e\x55\x74\xe4\x58\x74\xe4\x50\x74\x28\x53\xfc\xbc\xe8\x18\x37\x36\xe1\xe1\x2c\xc6\x39\x14\x19\x12\x89\x90\x93\x0d\x82\xdc\x0a\x04\x92\x65\x60\x14\xaf\x89\x84\x25\x22\x83\x47\x41\x95\x42\x06\x4b\x4c\xb9\x40\x6d\x89\xf3\xf8\x80\xc1\x8d\xc7\xe7\x20\x73\xaf\xd5\x33\xe7\x45\x1e\xde\x1f\xf9\x5a\xe6\x33\xe7\x10\x07\x65\xe7\x23\x89\x83\x45\xd3\xe8\xf0\x64\x48\xc7\x17\x01\x8a\x9b\x27\xe8\x17\xfc\x10\xaa\x78\x40\x61\x14\x5d\x7a\x3a\x87\x51\xe6\x02\xb4\x69\x8b\xb6\xe0\xa2\x69\x1e\x40\x9f\xb6\xc0\x08\x0a\x5d\x8e\x44\xfe\xc8\xd4\x50\xe4\x03\x21\x37\xe4\x8d\x09\x6f\x93\xeb\x6d\x24\xf1\x6b\xbd\x18\x49\xbc\x6a\xa6\x12\x9e\xb5\x4c\x98\x0d\x4c\xd6\x07\x14\xf9\x39\x80\xe2\x55\xed\x41\x14\xaf\x5c\x1b\x52\x46\xdc\x2c\x8f\xdd\x6c\xd0\x64\xc0\xcd\xbf\x13\xa4\x9c\xe3\x7a\x03\x2c\x7e\x17\x55\xee\x1f\x46\x16\x6f\xcd\xdf\x11\x2a\x64\x95\xaa\xbe\x3a\x3e\xa7\x76\x9b\x7a\xbd\xe1\x2c\xcd\x68\xac\x74\x6b\x14\xc1\x0b\x2c\x04\xc6\x9a\xb6\x5e\xc3\x4f\x12\xa1\xd0\xb3\x85\x3f\x53\xb5\xee\x94\x15\x65\x52\x21\x49\x8c\xd3\x5b\x25\x13\x45\x70\x24\x6a\x02\x48\x8a\x22\xdb\xbb\x62\x74\xb5\x0e\x3b\x92\x6d\x11\xf4\x9e\x60\x29\x9d\x53\xe6\xa9\x6e\xe3\xf0\xbe\xe2\xe9\xae\x5b\xdc\x33\xd0\x9e\x39\xce\x51\xdd\xda\x34\xfe\x88\xfb\x6b\xc3\x04\x1b\x43\x82\x79\xdd\xfb\x6f\x6d\xd2\x35\xec\xe6\x2e\x7d\x3b\x78\xd0\xfa\x34\xb4\x54\xbb\xe6\x0d\x29\x60\x01\x39\x29\x3e\x4a\x25\x28\x5b\xfd\x6a\xff\x71\x56\x8c\xc7\xef\x12\x9c\xed\x59\x5c\x2f\xc1\xad\xdd\x2d\xa1\x0b\x5e\xde\xd9\xb5\x06\x59\x90\x18\x3b\x26\x28\xcc\x8b\x4c\x9f\x4d\x02\xaa\x99\x4f\xaa\xfb\x03\x53\x17\xf7\x99\x66\x45\xd5\xd4\x57\xbb\xf0\xb6\x16\xf0\x2b\x48\x91\xa8\xad\x18\x1c\xfe\xcf\x2d\x8b\xa5\xf9\x70\x72\x7e\x2d\xda\xb7\x0f\x0c\x1f\xdb\x5a\xa6\x3e\xff\xcc\x4c\x23\x3e\x0e\xab\xe9\x59\xd2\x18\xe1\x37\xdf\xe1\xc6\xb8\xfd\xbd\x6c\xd0\xdf\xe6\x34\xd7\x73\x60\x53\x8c\xda\xf7\x94\x25\xf8\x04\x21\x7c\x5f\xb7\x1b\x59\xd9\xee\xfb\x41\xf7\xe9\xe4\x9a\x0e\x26\x50\x35\xca\x99\xff\xd0\xae\xaa\x4e\xe2\xc0\x02\xfe\x64\x0b\xa6\xdb\x7e\x38\xda\xf4\x66\x83\xab\x69\xa2\x39\xb4\x96\x63\x5c\xb9\x4a\xd9\xf1\x9a\x6c\x47\xa7\xfd\xcf\x66\x36\xc3\x7d\x9c\x99\x65\x59\x67\x45\xcd\x7b\x06\xdd\x90\xca\xb3\xce\x23\x5e\xcf\x2c\x39\xcf\x8e\x2b\x66\xc8\x09\x4d\x32\x9e\x0a\x68\xca\x8e\x16\x5e\x75\x6c\xac\xd1\xcc\x57\xe1\x1a\x37\xf5\x24\xb5\x1b\xf4\x87\x1e\xa2\x91\xd6\x1e\x6f\x0b\x22\x24\x26\xce\x2d\xd6\x69\xbd\x11\x7a\x40\x59\x76\x1d\x67\xf2\x1f\x3e\xfe\xaa\x31\xc7\x5e\x10\x44\x11\xbc\xc7\x4f\x5b\x2a\x30\xb1\xbd\x3e\x07\xeb\x8e\xca\xdc\x5a\xda\xf9\xf4\x5f\x44\x9a\x49\x09\x15\x3e\xcf\x42\xdb\xb7\x63\x62\x4d\xf7\xc8\x11\x51\x9f\xd1\x4d\x44\x49\x76\x9e\xb5\xb5\xf4\xff\xdb\xda\xd3\xf6\x56\x61\x14\x12\xef\x06\x62\x69\xb6\x42\x23\x61\xf7\x2a\x69\xd0\xc5\x30\x99\x67\x03\xf1\xb7\x7b\xdf\x98\xd6\x29\x2f\x54\x15\xe3\x19\x4c\x07\xf4\xcc\x01\x85\xe0\xa2\x22\x1d\x02\xe5\x36\x53\xda\x6b\x03\xf2\xcd\x8e\x69\xfc\x7e\x0d\x7a\x96\x6a\x5b\x34\xff\xe8\x63\xcc\xc3\x1c\x4c\x31\xda\x68\x18\x43\x9a\x81\xf2\x91\xaa\x78\x0d\xbb\xf0\x47\xdc\xb7\x9a\xfd\x19\x78\x61\x16\xea\xbf\x58\x73\xb7\xa0\x1b\x37\xbd\x37\x76\x0e\x03\x34\x75\x6b\x0d\x4f\xa4\xc2\xe1\xe8\xa8\x12\x73\xa6\x28\xdb\x62\xa7\xa3\x7b\xd4\x38\x4f\xf5\x02\x94\xe8\xa9\x71\x03\xc7\x47\xed\x42\xc3\x47\xc2\x69\x3f\xf5\x66\x43\x07\x99\xe1\x9a\xb9\xb0\x6e\xbe\xf9\x77\xd0\xbf\x65\xbb\x08\x2e\x48\x59\x9a\xc2\x77\x97\xba\xca\x51\xd8\xa1\x1a\x2d\xe7\xcd\xad\xa9\x2e\xff\x6a\x4a\x73\x75\x7a\xd0\x5c\x57\x5e\x7f\x74\x94\xf4\xe0\x09\x25\x94\xf5\x6a\x7a\x8b\x6d\x1f\xdc\xac\xd1\x73\x60\x34\x3b\xb1\x49\x9e\x41\x79\xcc\xe9\xca\xbf\x47\x16\x6e\x8f\x2c\x06\xf7\xc8\x17\x98\x92\x6d\xa6\xac\x2b\xb4\x07\x2c\x97\xa6\x52\x5b\xa1\x7b\xdc\x86\x67\x6e\x58\x0a\x8c\x69\x4a\x63\x20\x86\xcf\xd9\x2d\x73\x40\xc1\xe8\x25\x8b\x35\xf9\x14\xa3\x70\x7b\x6c\x77\x3f\xf0\x64\xc8\xb1\x4a\xf0\xb2\xd6\x0e\xfd\x2c\x18\x5c\xed\x46\xef\x2a\x8e\x42\xf1\x05\x5c\x65\x3c\x0e\x17\xd3\x99\xcd\xe5\x7c\xa6\x37\xe4\x04\xa5\xf9\x1a\xe4\xe5\x3c\xfa\xf2\x07\x22\x2a\x9b\xcf\x61\x2a\x1b\x0f\x55\x99\x4a\x78\xd6\xf4\xce\x46\xa7\x19\xa4\x2e\x9b\x4b\xb9\xcb\xe6\x77\x22\x2f\xdf\x28\xca\xc5\x5b\xa8\xd7\x4e\xcf\xbe\xfa\x8d\x9d\xfc\x66\xae\x75\xbb\xe3\xb5\xf7\xca\xbe\x60\x7a\x05\xee\xe0\xfd\x9a\x73\x5b\xae\xfd\x4b\xf5\x28\x82\x4c\xf7\x3d\x98\xb8\xb8\x6b\x01\x0d\x08\x82\x27\xdb\x18\x13\xa0\x0c\x5e\xdd\xdf\x3d\xff\xe1\xfb\xbf\x86\xfd\x81\xb7\x29\x6c\x25\x0a\x40\x46\x96\x19\x82\x32\xf7\xb3\x56\x43\x4d\x60\xaa\x7b\x5a\xba\x62\x5c\xa0\xb9\xd4\x94\xdb\xc2\xbc\x78\x9b\x19\x0d\x02\x84\xfd\xe0\xca\xb0\xba\xa0\x08\x1b\xcb\x3f\x2b\x96\x03\x8f\x0d\x47\x04\x6c\x33\xce\xc0\x7e\x62\xce\xea\x8a\x84\xe9\xc6\xeb\xdd\x00\x7b\x8c\x22\xb8\x59\x63\xbc\x01\xd1\x39\x10\x85\x5f\x85\x5a\x9e\x58\xd9\xd7\xe4\x96\xad\x4b\xb9\xee\xbd\xe9\xd8\x55\x54\x2d\xe6\xa7\x9c\x1e\x17\x0f\x73\x33\x7b\x55\xfe\x9a\xf7\x5e\xbe\xba\xb4\x2d\xd3\xdd\x0f\x95\xad\x83\x04\xae\xf6\x46\x26\x8f\xde\xa4\x8e\xef\x21\x4f\xab\x39\xf5\x8c\xe5\xf5\xe4\xe7\xd2\xc3\x73\xa8\x5f\x8b\x46\xd8\xcf\xfe\xd5\x9c\x7d\xa8\xe9\x3e\xd3\x18\xc2\x11\x0b\xd4\x8b\x27\xe0\xfe\x77\x0b\x2c\xf7\x15\x76\x85\x6d\x76\x71\x55\xb0\xb2\x9c\xb5\x26\x9a\x9a\xeb\xaf\xf0\x8e\x08\x92\xcb\xf0\xde\x24\xa5\x96\x70\xed\xef\x4d\x96\xb5\x3b\x6c\x1d\xc4\xea\x49\xaf\xc5\xcd\x16\xfe\x83\xc4\x9b\x95\xe0\x5b\x96\xb8\x57\xaf\xea\x95\x2b\x6c\x66\xfa\x99\xaa\xf5\x8d\x95\x9f\xc6\xea\x69\x0e\x9d\x99\x6f\x48\x96\xa1\xd0\x10\xdd\x77\x45\x6b\xdc\x80\x57\xc6\xd6\xd7\x9b\xb5\xb6\xd8\xb5\xf5\xac\x38\x7b\xfd\x09\xa6\x28\x4c\x0c\xa6\xb3\x2e\xc7\xb9\x2a\x88\x5a\x57\x71\x76\x6a\xef\x88\x5a\xdb\x05\x7a\xca\x83\xb0\x04\xa6\xf8\xc9\x0d\x0c\x82\x99\xfb\xc5\x20\x70\xff\x59\x22\x98\x79\x1f\x6a\xb5\xf8\x02\x82\xf9\x2f\xc1\x2f\xc1\xd1\x33\x75\x0f\x91\x51\x08\x58\x68\xd0\xe7\x22\x27\xca\x20\xd1\x34\xb0\x4b\xd4\xb9\x58\x96\x81\xa1\x8a\x8d\xe2\xb2\x04\xf7\x12\x39\x9d\x35\x25\x4f\x53\x60\x68\x89\x85\x79\xf1\x7f\xc3\x13\x84\xa0\x8b\x2d\xb9\x6e\xab\xe8\x47\x23\x75\x0c\x31\x1a\x7b\x79\xa8\x3b\xc3\x5b\x03\xbd\x66\x64\x59\x4e\x67\x2d\xb0\x75\x86\x57\x78\xda\x28\xbc\x65\x3b\x92\x51\x07\xaa\x2f\x9f\x0a\x8c\xcd\xcb\x9b\xee\x6a\xe9\x9a\xc3\xdf\x63\xb5\x25\xd9\x35\xd8\x99\xca\x1e\x8a\x8f\xe0\xac\x3d\x2e\x2d\x80\x14\x05\xb2\xc4\x50\x6c\x39\x07\x19\xba\xb2\x32\xe7\xdf\x56\x7a\x87\x61\x68\x1d\xb6\x23\x42\x53\xe2\xa1\xab\x07\xab\x9c\x17\x6a\x5e\x07\x65\xf4\x8e\xd2\xcc\x5b\x3f\x25\xeb\x21\xdf\x2d\x34\xe8\x1f\x6d\x48\xed\xed\xb1\x57\x7e\x0d\xde\xdc\x90\x1c\x75\x00\x3c\x15\xf8\x41\xd0\xfc\x35\x91\xca\x95\xe2\x4b\x96\x68\x26\xbf\xbe\xe1\x79\x4e\xca\x52\x5b\x3c\x1b\xd9\x68\xfa\x10\x3e\xb6\xdb\xb4\xfb\x7c\x60\x59\x65\xf8\x09\xc0\x74\x3c\xe0\x24\x68\x5a\xb9\x4a\xfc\x52\xf0\xd4\xc3\x7e\x03\x00\xfd\x92\x0c\x3b\x3b\xcb\xdc\x92\x6f\x2d\x33\x34\x44\x10\x1e\xd7\x34\x43\x58\x13\x96\x64\x94\xad\xc0\xc4\x4d\x2f\xd0\x3d\x24\x57\xc3\x4c\x82\x3e\x9c\x9d\x9e\x7d\x72\x64\xec\x1e\x48\xbd\x8b\xb3\xce\x26\x76\x3b\xf3\x4c\x40\x28\xa3\xaa\xc6\x8a\x33\x9f\x6c\xf5\x5f\x0d\x26\xef\x71\x45\xa5\x42\x31\x74\x35\x25\xa6\xfa\xdc\x30\x87\xb7\xf8\x38\x28\x32\xf3\xdd\x5e\x1c\xcd\x70\x1f\xaf\x31\x27\x4e\x9d\x7b\xfd\xd6\xd5\xf4\xbf\x00\x00\x00\xff\xff\x4c\xc6\xc4\x57\xf2\x2a\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xfa, 0xa5, 0x38, 0x6e, 0x40, 0x76, 0x90, 0xe7, 0x1b, 0x52, 0x86, 0x5e, 0xcd, 0x19, 0x49, 0x78, 0x62, 0x60, 0xd5, 0x1b, 0xb, 0x2e, 0xe6, 0x54, 0x25, 0x85, 0x38, 0x75, 0xcb, 0x82, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"definitions/features.toml":           definitionsFeaturesToml,
	"definitions/fields.toml":             definitionsFieldsToml,
	"definitions/info_object_meta.toml":   definitionsInfo_object_metaToml,
	"definitions/info_storage_meta.toml":  definitionsInfo_storage_metaToml,
	"definitions/operations.toml":         definitionsOperationsToml,
	"definitions/pairs.toml":              definitionsPairsToml,
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": {nil, map[string]*bintree{
		"features.toml":          {definitionsFeaturesToml, map[string]*bintree{}},
		"fields.toml":            {definitionsFieldsToml, map[string]*bintree{}},
		"info_object_meta.toml":  {definitionsInfo_object_metaToml, map[string]*bintree{}},
		"info_storage_meta.toml": {definitionsInfo_storage_metaToml, map[string]*bintree{}},
		"operations.toml":        {definitionsOperationsToml, map[string]*bintree{}},
		"pairs.toml":             {definitionsPairsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
